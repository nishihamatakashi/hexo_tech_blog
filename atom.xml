<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Nishihama&#39;s Tech Blog</title>
  
  
  <link href="https://nishihamatakashi.github.io/atom.xml" rel="self"/>
  
  <link href="https://nishihamatakashi.github.io/"/>
  <updated>2020-12-25T12:41:20.155Z</updated>
  <id>https://nishihamatakashi.github.io/</id>
  
  <author>
    <name>Nishihama Takashi</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="https://nishihamatakashi.github.io/2020/12/29/Ue4Core/"/>
    <id>https://nishihamatakashi.github.io/2020/12/29/Ue4Core/</id>
    <published>2020-12-29T05:09:58.856Z</published>
    <updated>2020-12-25T12:41:20.155Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>C++におけるtemplateについて</title>
    <link href="https://nishihamatakashi.github.io/2020/12/29/CppTemplate/"/>
    <id>https://nishihamatakashi.github.io/2020/12/29/CppTemplate/</id>
    <published>2020-12-29T05:09:58.855Z</published>
    <updated>2020-12-22T17:21:29.284Z</updated>
    
    <content type="html"><![CDATA[<h1 id="目次"><a href="#目次" class="headerlink" title="目次"></a>目次</h1><ul><li>templateについて</li><li>完全特殊化・部分特殊化</li><li>型制約によるコンパイルアサ―ト</li><li>SFINAE</li><li>テンプレートメタプログラミング</li></ul><h1 id="templateについて"><a href="#templateについて" class="headerlink" title="templateについて"></a>templateについて</h1><p>静的型付けのプログラミング言語でデータ型を抽象化してコードを書くことができるようにする機能で，C++ではジェネリックプログラミングに用いられる．<br>C++では下記のtemplateに対応している．</p><ul><li>関数</li><li>クラス</li><li>構造体</li><li>変数</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//template関数</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">testFunc</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//templateクラス</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">testClass</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//template構造体</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">testStruct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//template変数</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">constexpr</span> T pi = <span class="keyword">static_cast</span>&lt;T&gt;(<span class="number">3.14159265358979323846</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>また，記述としては<code>template&lt;typename T&gt;</code>と<code>template&lt;class T&gt;</code>がある．<br>どちらも，同じ意味になる．一般的にclassは自分で定義したクラス，typenameはリテラル型であることが一般的．</p><h1 id="完全特殊化・部分特殊化"><a href="#完全特殊化・部分特殊化" class="headerlink" title="完全特殊化・部分特殊化"></a>完全特殊化・部分特殊化</h1><p>仮に下記のような自作のprint_number関数を作ったとする．</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="comment">//ただのprintf</span></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">print_number</span><span class="params">(<span class="keyword">const</span> T&amp; value)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> p = <span class="number">0</span>;</span><br><span class="line">    print_number&lt;<span class="keyword">int</span>&gt;(p);</span><br><span class="line">    getchar();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>実行結果<code>0</code><br>上記の場合int型を指定すれば，動作する．しかし，型がfloatなど様々なリテラル型の場合に対応したリテラル指定子に変えたい場合は下記のような特殊化を行う．</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">print_number</span><span class="params">(<span class="keyword">const</span> T value)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;&gt; <span class="keyword">inline</span> <span class="keyword">void</span> print_number&lt;<span class="keyword">int</span>&gt;(<span class="keyword">const</span> <span class="keyword">int</span> value) </span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;&gt; <span class="keyword">inline</span> <span class="keyword">void</span> print_number&lt;<span class="keyword">float</span>&gt;(<span class="keyword">const</span> <span class="keyword">float</span> value) </span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%f&quot;</span>, value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> p_int = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">float</span> p_float = <span class="number">0.0f</span>;</span><br><span class="line">    print_number&lt;<span class="keyword">int</span>&gt;(p_int);</span><br><span class="line">    print_number&lt;<span class="keyword">float</span>&gt;(p_float);</span><br><span class="line">    getchar();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>実行結果<code>0 0.000000</code>と，型Tに設定した型によってinline展開する関数を変えることができる．</p><p>また，template引数が複数ある場合下記のように片方のみを特殊化することができる．<br>これは部分特殊化となる．</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;目次&quot;&gt;&lt;a href=&quot;#目次&quot; class=&quot;headerlink&quot; title=&quot;目次&quot;&gt;&lt;/a&gt;目次&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;templateについて&lt;/li&gt;
&lt;li&gt;完全特殊化・部分特殊化&lt;/li&gt;
&lt;li&gt;型制約によるコンパイルアサ―ト&lt;/li&gt;
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>C++のコンパイラについて</title>
    <link href="https://nishihamatakashi.github.io/2020/12/29/CppCompilerOption/"/>
    <id>https://nishihamatakashi.github.io/2020/12/29/CppCompilerOption/</id>
    <published>2020-12-29T05:09:58.842Z</published>
    <updated>2020-12-25T15:57:09.049Z</updated>
    
    <content type="html"><![CDATA[<h1 id="コンパイラ種別"><a href="#コンパイラ種別" class="headerlink" title="コンパイラ種別"></a>コンパイラ種別</h1><p>C++のコンパイラは大体下記</p><ul><li>clang</li><li>gcc</li><li>cl.exe</li><li>icc</li><li>bcc</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;コンパイラ種別&quot;&gt;&lt;a href=&quot;#コンパイラ種別&quot; class=&quot;headerlink&quot; title=&quot;コンパイラ種別&quot;&gt;&lt;/a&gt;コンパイラ種別&lt;/h1&gt;&lt;p&gt;C++のコンパイラは大体下記&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;clang&lt;/li&gt;
&lt;li&gt;gcc&lt;/li</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>CMakeチュートリアル</title>
    <link href="https://nishihamatakashi.github.io/2020/12/29/CMakeTutorial/"/>
    <id>https://nishihamatakashi.github.io/2020/12/29/CMakeTutorial/</id>
    <published>2020-12-29T05:09:58.841Z</published>
    <updated>2020-12-29T05:09:27.170Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Step1-HelloWorldプロジェクトの作成"><a href="#Step1-HelloWorldプロジェクトの作成" class="headerlink" title="Step1 HelloWorldプロジェクトの作成"></a>Step1 HelloWorldプロジェクトの作成</h1><p>CMakeを利用して，cppのvsプロジェクトの作成，ビルドを行う．</p><h2 id="フォルダ構成"><a href="#フォルダ構成" class="headerlink" title="フォルダ構成"></a>フォルダ構成</h2><pre><code>-code    |-_build    |-main.cpp    |-CMakeLists.txt</code></pre><h2 id="main-cpp"><a href="#main-cpp" class="headerlink" title="main.cpp"></a>main.cpp</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Hello World&quot;</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="CMakeLists-txt"><a href="#CMakeLists-txt" class="headerlink" title="CMakeLists.txt"></a>CMakeLists.txt</h2><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># バージョン保証</span></span><br><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.15</span>.<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#project作成</span></span><br><span class="line"><span class="keyword">project</span>(MyProject VERSION <span class="number">1.0</span>.<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#exeプロジェクト作成</span></span><br><span class="line"><span class="keyword">add_executable</span>(cmake-good main.cpp)</span><br></pre></td></tr></table></figure><h2 id="コマンド"><a href="#コマンド" class="headerlink" title="コマンド"></a>コマンド</h2><pre><code>- cd/_build- cmake ../- cmake --build ../_build- /Debug/cmake-good- 実行結果：HelloWorld</code></pre><h1 id="Step2-Out-Source-Build"><a href="#Step2-Out-Source-Build" class="headerlink" title="Step2 Out Source Build"></a>Step2 Out Source Build</h1><p>Step1では，プロジェクトファイルやビルド成果物を<code>_build</code>ディレクトリにまとめるため下記のような操作をした．</p><ul><li>_buildディレクトリ作成</li><li>_buildディレクトリに移動</li><li>CMakeLists.txtのディレクトリを指定してcmake</li></ul><p>これをCmakeコマンドのみで実行することで，ビルドツリーとソースツリーを分けることができ，gitへのコミットや成果物の削除が容易になる．</p><h2 id="コマンド-1"><a href="#コマンド-1" class="headerlink" title="コマンド"></a>コマンド</h2><pre><code>- cmake -B _build- cmake --build _build</code></pre><h1 id="Step3-複数ファイルのコンパイル"><a href="#Step3-複数ファイルのコンパイル" class="headerlink" title="Step3 複数ファイルのコンパイル"></a>Step3 複数ファイルのコンパイル</h1><p>ヘッダーファイル(.h)やソースファイル(.cpp)をまとめて，プロジェクトに登録しビルドする．</p><h2 id="フォルダ構成-1"><a href="#フォルダ構成-1" class="headerlink" title="フォルダ構成"></a>フォルダ構成</h2><pre><code>- code    |- include    |   |- MyMath.h    |   |- Vector.h    |-src        |-Main.cpp        |-MyMath.cpp        |-Vector.cpp</code></pre><h2 id="ソースファイル"><a href="#ソースファイル" class="headerlink" title="ソースファイル"></a>ソースファイル</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*--------------------------------------------------------</span></span><br><span class="line"><span class="comment">*@file MyMath.h</span></span><br><span class="line"><span class="comment">*/</span> <span class="comment">//-----------------------------------------------------</span></span><br><span class="line"><span class="keyword">namespace</span> app</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">test_print</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*--------------------------------------------------------</span></span><br><span class="line"><span class="comment">*@file MyMath.cpp</span></span><br><span class="line"><span class="comment">*/</span> <span class="comment">//-----------------------------------------------------</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;MyMath.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> app</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">test_print</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;test&quot;</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*--------------------------------------------------------</span></span><br><span class="line"><span class="comment">*@file Vector.h</span></span><br><span class="line"><span class="comment">*/</span> <span class="comment">//-----------------------------------------------------</span></span><br><span class="line"><span class="keyword">namespace</span> app</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">test_vector</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*--------------------------------------------------------</span></span><br><span class="line"><span class="comment">*@file Vector.cpp</span></span><br><span class="line"><span class="comment">*/</span> <span class="comment">//-----------------------------------------------------</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;Vector.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> app</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">test_vector</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;vector&quot;</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*--------------------------------------------------------</span></span><br><span class="line"><span class="comment">*@file Main.cpp</span></span><br><span class="line"><span class="comment">*/</span> <span class="comment">//-----------------------------------------------------</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;MyMath.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;Vector.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    app::test_print();</span><br><span class="line">    app::test_vector();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="CMakeファイル"><a href="#CMakeファイル" class="headerlink" title="CMakeファイル"></a>CMakeファイル</h2><p>操作の手順としては下記</p><ul><li>各種変数を設定</li><li>ソースディレクトリからファイルを収集</li><li>まとめてadd_executableに登録</li><li>includeディレクトリを設定</li><li>vsのプロジェクト内でフィルター毎にファイルが分類されるように設定</li></ul><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># バージョン保証</span></span><br><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.15</span>.<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#CMakeListsのカレントディレクトリ</span></span><br><span class="line"><span class="keyword">set</span>(CURRENT_DIR <span class="variable">$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#ソースディレクトリ</span></span><br><span class="line"><span class="keyword">set</span>(SOURCE_DIR <span class="variable">$&#123;CURRENT_DIR&#125;</span>/src)</span><br><span class="line"></span><br><span class="line"><span class="comment">#includeディレクトリ</span></span><br><span class="line"><span class="keyword">set</span>(INCLUDE_DIR <span class="variable">$&#123;CURRENT_DIR&#125;</span>/<span class="keyword">include</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span>(SOURCES <span class="string">&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#inludeディレクトリから.hファイルを収集し,SOURCESに追加</span></span><br><span class="line"><span class="keyword">file</span>(GLOB_RECURSE INC_SOURCES <span class="variable">$&#123;INCLUDE_DIR&#125;</span>/*.h)</span><br><span class="line"><span class="keyword">LIST</span>(APPEND SOURCES <span class="variable">$&#123;INC_SOURCES&#125;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#srcディレクトリから.cppファイルを収集し,SOURCESに追加</span></span><br><span class="line"><span class="keyword">file</span>(GLOB_RECURSE SRC_SOURCES <span class="variable">$&#123;SOURCE_DIR&#125;</span>/*.cpp)</span><br><span class="line"><span class="keyword">LIST</span>(APPEND SOURCES <span class="variable">$&#123;SRC_SOURCES&#125;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#project名</span></span><br><span class="line"><span class="keyword">set</span>(PROJECT_NAME <span class="string">&quot;MyProject&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#project作成</span></span><br><span class="line"><span class="keyword">project</span>(<span class="variable">$&#123;PROJECT_NAME&#125;</span> VERSION <span class="number">1.0</span>.<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#インクルードディレクトリの設定</span></span><br><span class="line"><span class="keyword">include_directories</span>(<span class="string">&quot;$&#123;INCLUDE_DIR&#125;&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#ソースをすべてプロジェクトに登録</span></span><br><span class="line"><span class="keyword">add_executable</span>(<span class="variable">$&#123;PROJECT_NAME&#125;</span> <span class="variable">$&#123;SOURCES&#125;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#ソースのフィルタ分け</span></span><br><span class="line"><span class="keyword">source_group</span>(<span class="string">&quot;include&quot;</span> FILES <span class="variable">$&#123;INC_SOURCES&#125;</span>)</span><br><span class="line"><span class="keyword">source_group</span>(<span class="string">&quot;src&quot;</span> FILES <span class="variable">$&#123;SRC_SOURCES&#125;</span>)</span><br></pre></td></tr></table></figure><h1 id="Step4-プロジェクト別の設定"><a href="#Step4-プロジェクト別の設定" class="headerlink" title="Step4 プロジェクト別の設定"></a>Step4 プロジェクト別の設定</h1><p>.exe以外に，静的ライブラリlib,動的ライブラリdlllの作成を行う．</p><h2 id="フォルダ構成-2"><a href="#フォルダ構成-2" class="headerlink" title="フォルダ構成"></a>フォルダ構成</h2><pre><code>- code    |- include    |   |- MyMath.h    |   |- Vector.h    |-src        |-Main.cpp        |-MyMath.cpp        |-Vector.cpp</code></pre><h2 id="静的ライブラリの作成"><a href="#静的ライブラリの作成" class="headerlink" title="静的ライブラリの作成"></a>静的ライブラリの作成</h2><p>下記のCMakeListsを作る．</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># バージョン保証</span></span><br><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.15</span>.<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#CMakeListsのカレントディレクトリ</span></span><br><span class="line"><span class="keyword">set</span>(CURRENT_DIR <span class="variable">$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#ソースディレクトリ</span></span><br><span class="line"><span class="keyword">set</span>(SOURCE_DIR <span class="variable">$&#123;CURRENT_DIR&#125;</span>/src)</span><br><span class="line"></span><br><span class="line"><span class="comment">#includeディレクトリ</span></span><br><span class="line"><span class="keyword">set</span>(INCLUDE_DIR <span class="variable">$&#123;CURRENT_DIR&#125;</span>/<span class="keyword">include</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span>(SOURCES <span class="string">&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#inludeディレクトリから.hファイルを収集し,SOURCESに追加</span></span><br><span class="line"><span class="keyword">file</span>(GLOB_RECURSE INC_SOURCES <span class="variable">$&#123;INCLUDE_DIR&#125;</span>/*.h)</span><br><span class="line"><span class="keyword">LIST</span>(APPEND SOURCES <span class="variable">$&#123;INC_SOURCES&#125;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#srcディレクトリから.cppファイルを収集し,SOURCESに追加</span></span><br><span class="line"><span class="keyword">file</span>(GLOB_RECURSE SRC_SOURCES <span class="variable">$&#123;SOURCE_DIR&#125;</span>/*.cpp)</span><br><span class="line"><span class="keyword">LIST</span>(APPEND SOURCES <span class="variable">$&#123;SRC_SOURCES&#125;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#project名</span></span><br><span class="line"><span class="keyword">set</span>(PROJECT_NAME <span class="string">&quot;MyProject&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#project作成</span></span><br><span class="line"><span class="keyword">project</span>(<span class="variable">$&#123;PROJECT_NAME&#125;</span> VERSION <span class="number">1.0</span>.<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#インクルードディレクトリの設定</span></span><br><span class="line"><span class="keyword">include_directories</span>(<span class="string">&quot;$&#123;INCLUDE_DIR&#125;&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#静的ライブラリを作成</span></span><br><span class="line"><span class="keyword">add_library</span>(<span class="variable">$&#123;PROJECT_NAME&#125;</span> STATIC <span class="variable">$&#123;SOURCES&#125;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#ソースのフィルタ分け</span></span><br><span class="line"><span class="keyword">source_group</span>(<span class="string">&quot;include&quot;</span> FILES <span class="variable">$&#123;INC_SOURCES&#125;</span>)</span><br><span class="line"><span class="keyword">source_group</span>(<span class="string">&quot;src&quot;</span> FILES <span class="variable">$&#123;SRC_SOURCES&#125;</span>)</span><br></pre></td></tr></table></figure><p>そして下記のコマンドを実行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cmake -B _build_lib</span><br><span class="line">cmake --build _build_lib</span><br></pre></td></tr></table></figure><p>以上で，下記の場所にlibファイルができる</p><pre><code>- code    | - _build_lib            |- Debug                |- MyProject.lib                |- MyProject.pbd</code></pre><h2 id="動的ライブラリの作成"><a href="#動的ライブラリの作成" class="headerlink" title="動的ライブラリの作成"></a>動的ライブラリの作成</h2><p>下記のCMakeListsを作る．</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># バージョン保証</span></span><br><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.15</span>.<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#CMakeListsのカレントディレクトリ</span></span><br><span class="line"><span class="keyword">set</span>(CURRENT_DIR <span class="variable">$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#ソースディレクトリ</span></span><br><span class="line"><span class="keyword">set</span>(SOURCE_DIR <span class="variable">$&#123;CURRENT_DIR&#125;</span>/src)</span><br><span class="line"></span><br><span class="line"><span class="comment">#includeディレクトリ</span></span><br><span class="line"><span class="keyword">set</span>(INCLUDE_DIR <span class="variable">$&#123;CURRENT_DIR&#125;</span>/<span class="keyword">include</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span>(SOURCES <span class="string">&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#inludeディレクトリから.hファイルを収集し,SOURCESに追加</span></span><br><span class="line"><span class="keyword">file</span>(GLOB_RECURSE INC_SOURCES <span class="variable">$&#123;INCLUDE_DIR&#125;</span>/*.h)</span><br><span class="line"><span class="keyword">LIST</span>(APPEND SOURCES <span class="variable">$&#123;INC_SOURCES&#125;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#srcディレクトリから.cppファイルを収集し,SOURCESに追加</span></span><br><span class="line"><span class="keyword">file</span>(GLOB_RECURSE SRC_SOURCES <span class="variable">$&#123;SOURCE_DIR&#125;</span>/*.cpp)</span><br><span class="line"><span class="keyword">LIST</span>(APPEND SOURCES <span class="variable">$&#123;SRC_SOURCES&#125;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#project名</span></span><br><span class="line"><span class="keyword">set</span>(PROJECT_NAME <span class="string">&quot;MyProject&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#project作成</span></span><br><span class="line"><span class="keyword">project</span>(<span class="variable">$&#123;PROJECT_NAME&#125;</span> VERSION <span class="number">1.0</span>.<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#インクルードディレクトリの設定</span></span><br><span class="line"><span class="keyword">include_directories</span>(<span class="string">&quot;$&#123;INCLUDE_DIR&#125;&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#動的ライブラリを作成</span></span><br><span class="line"><span class="keyword">add_library</span>(<span class="variable">$&#123;PROJECT_NAME&#125;</span> SHARED <span class="variable">$&#123;SOURCES&#125;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#ソースのフィルタ分け</span></span><br><span class="line"><span class="keyword">source_group</span>(<span class="string">&quot;include&quot;</span> FILES <span class="variable">$&#123;INC_SOURCES&#125;</span>)</span><br><span class="line"><span class="keyword">source_group</span>(<span class="string">&quot;src&quot;</span> FILES <span class="variable">$&#123;SRC_SOURCES&#125;</span>)</span><br></pre></td></tr></table></figure><p>そして下記のコマンドを実行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cmake -B _build_lib</span><br><span class="line">cmake --build _build_dll</span><br></pre></td></tr></table></figure><p>以上で，下記の場所にdllファイルができる</p><pre><code>- code    | - _build_dll            |- Debug                |- MyProject.dll                |- MyProject.ilk                |- MyProject.pbd</code></pre><h1 id="Step5-ライブラリのリンク"><a href="#Step5-ライブラリのリンク" class="headerlink" title="Step5 ライブラリのリンク"></a>Step5 ライブラリのリンク</h1><p>Step3で作成したexeにStep4で作成したlibをリンクさせる．</p><h2 id="ファイル構成"><a href="#ファイル構成" class="headerlink" title="ファイル構成"></a>ファイル構成</h2><pre><code>- code    | - core    |    | - include    |    |    | - Math.h    |    |    | - Vector.h    |    | - src    |         | - Math.cpp    |         | - Vector.cpp    | - app    |    | - include    |    |    |- Def.h    |    | - src    |         |-Main.cpp    | - CMakeLists</code></pre><h2 id="静的ライブラリのリンク"><a href="#静的ライブラリのリンク" class="headerlink" title="静的ライブラリのリンク"></a>静的ライブラリのリンク</h2><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># バージョン保証</span></span><br><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.15</span>.<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#CMakeListsのカレントディレクトリ</span></span><br><span class="line"><span class="keyword">set</span>(CURRENT_DIR <span class="variable">$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;</span>)</span><br><span class="line"><span class="comment">#ソースディレクトリ</span></span><br><span class="line"><span class="keyword">set</span>(SOURCE_DIR <span class="variable">$&#123;CURRENT_DIR&#125;</span>/src)</span><br><span class="line"><span class="comment">#includeディレクトリ</span></span><br><span class="line"><span class="keyword">set</span>(INCLUDE_DIR <span class="variable">$&#123;CURRENT_DIR&#125;</span>/<span class="keyword">include</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#inludeディレクトリから.hファイルを収集し,SOURCESに追加</span></span><br><span class="line"><span class="keyword">set</span>(SOURCES <span class="string">&quot;&quot;</span>)</span><br><span class="line"><span class="keyword">file</span>(GLOB_RECURSE INC_SOURCES <span class="variable">$&#123;INCLUDE_DIR&#125;</span>/*.h)</span><br><span class="line"><span class="keyword">LIST</span>(APPEND SOURCES <span class="variable">$&#123;INC_SOURCES&#125;</span>)</span><br><span class="line"><span class="comment">#srcディレクトリから.cppファイルを収集し,SOURCESに追加</span></span><br><span class="line"><span class="keyword">file</span>(GLOB_RECURSE SRC_SOURCES <span class="variable">$&#123;SOURCE_DIR&#125;</span>/*.cpp)</span><br><span class="line"><span class="keyword">LIST</span>(APPEND SOURCES <span class="variable">$&#123;SRC_SOURCES&#125;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#coreライブラりのディレクトリ</span></span><br><span class="line"><span class="keyword">set</span>(CORE_DIR <span class="variable">$&#123;CURRENT_DIR&#125;</span>/../core/)</span><br><span class="line"><span class="comment">#coreのincludeディレクトリ</span></span><br><span class="line"><span class="keyword">set</span>(CORE_INCLUDE_DIR <span class="variable">$&#123;CORE_DIR&#125;</span>/<span class="keyword">include</span>)</span><br><span class="line"><span class="comment">#coreのsrcディレクトリ</span></span><br><span class="line"><span class="keyword">set</span>(CORE_SOURCE_DIR <span class="variable">$&#123;CORE_DIR&#125;</span>/src)</span><br><span class="line"></span><br><span class="line"><span class="comment">#coreのinludeディレクトリから.hファイルを収集し,SOURCESに追加</span></span><br><span class="line"><span class="keyword">set</span>(CORE_SOURCES <span class="string">&quot;&quot;</span>)</span><br><span class="line"><span class="keyword">file</span>(GLOB_RECURSE CORE_INC_SOURCES <span class="variable">$&#123;CORE_INCLUDE_DIR&#125;</span>/*.h)</span><br><span class="line"><span class="keyword">LIST</span>(APPEND CORE_SOURCES <span class="variable">$&#123;CORE_INC_SOURCES&#125;</span>)</span><br><span class="line"><span class="comment">#coreのsrcディレクトリから.cppファイルを収集し,SOURCESに追加</span></span><br><span class="line"><span class="keyword">file</span>(GLOB_RECURSE CORE_SRC_SOURCES <span class="variable">$&#123;CORE_SOURCE_DIR&#125;</span>/*.cpp)</span><br><span class="line"><span class="keyword">LIST</span>(APPEND CORE_SOURCES <span class="variable">$&#123;CORE_SRC_SOURCES&#125;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#project名</span></span><br><span class="line"><span class="keyword">set</span>(PROJECT_NAME <span class="string">&quot;MyProject&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#library名</span></span><br><span class="line"><span class="keyword">set</span>(LIB_NAME <span class="string">&quot;Core&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#project作成</span></span><br><span class="line"><span class="keyword">project</span>(<span class="variable">$&#123;PROJECT_NAME&#125;</span> VERSION <span class="number">1.0</span>.<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#インクルードディレクトリの設定</span></span><br><span class="line"><span class="keyword">include_directories</span>(<span class="string">&quot;$&#123;INCLUDE_DIR&#125;&quot;</span> <span class="string">&quot;$&#123;CORE_INCLUDE_DIR&#125;&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">add_library</span>(<span class="variable">$&#123;LIB_NAME&#125;</span> STATIC <span class="variable">$&#123;CORE_SOURCES&#125;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#ソースをすべてプロジェクトに登録</span></span><br><span class="line"><span class="keyword">add_executable</span>(<span class="variable">$&#123;PROJECT_NAME&#125;</span> <span class="variable">$&#123;SOURCES&#125;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#$&#123;PROJECT_NSMER# バージョン保証</span></span><br><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.15</span>.<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#CMakeListsのカレントディレクトリ</span></span><br><span class="line"><span class="keyword">set</span>(CURRENT_DIR <span class="variable">$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;</span>)</span><br><span class="line"><span class="comment">#ソースディレクトリ</span></span><br><span class="line"><span class="keyword">set</span>(SOURCE_DIR <span class="variable">$&#123;CURRENT_DIR&#125;</span>/src)</span><br><span class="line"><span class="comment">#includeディレクトリ</span></span><br><span class="line"><span class="keyword">set</span>(INCLUDE_DIR <span class="variable">$&#123;CURRENT_DIR&#125;</span>/<span class="keyword">include</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#inludeディレクトリから.hファイルを収集し,SOURCESに追加</span></span><br><span class="line"><span class="keyword">set</span>(SOURCES <span class="string">&quot;&quot;</span>)</span><br><span class="line"><span class="keyword">file</span>(GLOB_RECURSE INC_SOURCES <span class="variable">$&#123;INCLUDE_DIR&#125;</span>/*.h)</span><br><span class="line"><span class="keyword">LIST</span>(APPEND SOURCES <span class="variable">$&#123;INC_SOURCES&#125;</span>)</span><br><span class="line"><span class="comment">#srcディレクトリから.cppファイルを収集し,SOURCESに追加</span></span><br><span class="line"><span class="keyword">file</span>(GLOB_RECURSE SRC_SOURCES <span class="variable">$&#123;SOURCE_DIR&#125;</span>/*.cpp)</span><br><span class="line"><span class="keyword">LIST</span>(APPEND SOURCES <span class="variable">$&#123;SRC_SOURCES&#125;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#coreライブラりのディレクトリ</span></span><br><span class="line"><span class="keyword">set</span>(CORE_DIR <span class="variable">$&#123;CURRENT_DIR&#125;</span>/../core/)</span><br><span class="line"><span class="comment">#coreのincludeディレクトリ</span></span><br><span class="line"><span class="keyword">set</span>(CORE_INCLUDE_DIR <span class="variable">$&#123;CORE_DIR&#125;</span>/<span class="keyword">include</span>)</span><br><span class="line"><span class="comment">#coreのsrcディレクトリ</span></span><br><span class="line"><span class="keyword">set</span>(CORE_SOURCE_DIR <span class="variable">$&#123;CORE_DIR&#125;</span>/src)</span><br><span class="line"></span><br><span class="line"><span class="comment">#coreのinludeディレクトリから.hファイルを収集し,SOURCESに追加</span></span><br><span class="line"><span class="keyword">set</span>(CORE_SOURCES <span class="string">&quot;&quot;</span>)</span><br><span class="line"><span class="keyword">file</span>(GLOB_RECURSE CORE_INC_SOURCES <span class="variable">$&#123;CORE_INCLUDE_DIR&#125;</span>/*.h)</span><br><span class="line"><span class="keyword">LIST</span>(APPEND CORE_SOURCES <span class="variable">$&#123;CORE_INC_SOURCES&#125;</span>)</span><br><span class="line"><span class="comment">#coreのsrcディレクトリから.cppファイルを収集し,SOURCESに追加</span></span><br><span class="line"><span class="keyword">file</span>(GLOB_RECURSE CORE_SRC_SOURCES <span class="variable">$&#123;CORE_SOURCE_DIR&#125;</span>/*.cpp)</span><br><span class="line"><span class="keyword">LIST</span>(APPEND CORE_SOURCES <span class="variable">$&#123;CORE_SRC_SOURCES&#125;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#project名</span></span><br><span class="line"><span class="keyword">set</span>(PROJECT_NAME <span class="string">&quot;MyProject&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#library名</span></span><br><span class="line"><span class="keyword">set</span>(LIB_NAME <span class="string">&quot;Core&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#project作成</span></span><br><span class="line"><span class="keyword">project</span>(<span class="variable">$&#123;PROJECT_NAME&#125;</span> VERSION <span class="number">1.0</span>.<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#インクルードディレクトリの設定</span></span><br><span class="line"><span class="keyword">include_directories</span>(<span class="string">&quot;$&#123;INCLUDE_DIR&#125;&quot;</span> <span class="string">&quot;$&#123;CORE_INCLUDE_DIR&#125;&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#libを作成</span></span><br><span class="line"><span class="keyword">add_library</span>(<span class="variable">$&#123;LIB_NAME&#125;</span> STATIC <span class="variable">$&#123;CORE_SOURCES&#125;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#exeを作成</span></span><br><span class="line"><span class="keyword">add_executable</span>(<span class="variable">$&#123;PROJECT_NAME&#125;</span> <span class="variable">$&#123;SOURCES&#125;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#生成したexeにlibをリンクする．</span></span><br><span class="line"><span class="keyword">target_link_libraries</span>(<span class="variable">$&#123;PROJECT_NAME&#125;</span> <span class="variable">$&#123;LIB_NAME&#125;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#ソースのフィルタ分け</span></span><br><span class="line"><span class="keyword">source_group</span>(<span class="string">&quot;include&quot;</span> FILES <span class="variable">$&#123;INC_SOURCES&#125;</span>)</span><br><span class="line"><span class="keyword">source_group</span>(<span class="string">&quot;src&quot;</span> FILES <span class="variable">$&#123;SRC_SOURCES&#125;</span>)&#125;</span><br><span class="line"><span class="keyword">target_link_libraries</span>(<span class="variable">$&#123;PROJECT_NAME&#125;</span> <span class="variable">$&#123;LIB_NAME&#125;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#ソースのフィルタ分け</span></span><br><span class="line"><span class="keyword">source_group</span>(<span class="string">&quot;include&quot;</span> FILES <span class="variable">$&#123;INC_SOURCES&#125;</span>)</span><br><span class="line"><span class="keyword">source_group</span>(<span class="string">&quot;src&quot;</span> FILES <span class="variable">$&#123;SRC_SOURCES&#125;</span>)</span><br></pre></td></tr></table></figure><h1 id="Step6-ビルド構成の設定"><a href="#Step6-ビルド構成の設定" class="headerlink" title="Step6 ビルド構成の設定"></a>Step6 ビルド構成の設定</h1><p>GeneratorがVisual StudioやXCodeなどの統合開発環境(IDE系)の場合，複数のビルドタイプを保持することができる．</p><p>例として,cmakeコマンド入力時下記のようなコマンドを入力すると，ビルド構成が「Debug」,「Develope」,「Release」で分けることができる．</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cmake -B_build -DCMAKE_CONFIGURATION_TYPES&#x3D;&quot;Debug;Develope;Release&quot;</span><br></pre></td></tr></table></figure><h1 id="Step7-定義済みマクロの定義"><a href="#Step7-定義済みマクロの定義" class="headerlink" title="Step7 定義済みマクロの定義"></a>Step7 定義済みマクロの定義</h1><p>CMakeを使用して，定義済みマクロ(プリプロセッサマクロ)の定義を行う．</p><p>また，今回はStep6で説明したビルド構成別に定義しているマクロを変更できるようにする．</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># バージョン保証</span></span><br><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.15</span>.<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#CMakeListsのカレントディレクトリ</span></span><br><span class="line"><span class="keyword">set</span>(CURRENT_DIR <span class="variable">$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#ソースディレクトリ</span></span><br><span class="line"><span class="keyword">set</span>(SOURCE_DIR <span class="variable">$&#123;CURRENT_DIR&#125;</span>/src)</span><br><span class="line"></span><br><span class="line"><span class="comment">#includeディレクトリ</span></span><br><span class="line"><span class="keyword">set</span>(INCLUDE_DIR <span class="variable">$&#123;CURRENT_DIR&#125;</span>/<span class="keyword">include</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#project名</span></span><br><span class="line"><span class="keyword">set</span>(PROJECT_NAME <span class="string">&quot;MyProject&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#inludeディレクトリから.hファイルを収集し,SOURCESに追加</span></span><br><span class="line"><span class="keyword">set</span>(SOURCES <span class="string">&quot;&quot;</span>)</span><br><span class="line"><span class="keyword">file</span>(GLOB_RECURSE INC_SOURCES <span class="variable">$&#123;INCLUDE_DIR&#125;</span>/*.h)</span><br><span class="line"><span class="keyword">LIST</span>(APPEND SOURCES <span class="variable">$&#123;INC_SOURCES&#125;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#srcディレクトリから.cppファイルを収集し,SOURCESに追加</span></span><br><span class="line"><span class="keyword">file</span>(GLOB_RECURSE SRC_SOURCES <span class="variable">$&#123;SOURCE_DIR&#125;</span>/*.cpp)</span><br><span class="line"><span class="keyword">LIST</span>(APPEND SOURCES <span class="variable">$&#123;SRC_SOURCES&#125;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#project作成</span></span><br><span class="line"><span class="keyword">project</span>(<span class="variable">$&#123;PROJECT_NAME&#125;</span> VERSION <span class="number">1.0</span>.<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#インクルードディレクトリの設定</span></span><br><span class="line"><span class="keyword">include_directories</span>(<span class="string">&quot;$&#123;INCLUDE_DIR&#125;&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#ソースをすべてプロジェクトに登録</span></span><br><span class="line"><span class="keyword">add_executable</span>(<span class="variable">$&#123;PROJECT_NAME&#125;</span> <span class="variable">$&#123;SOURCES&#125;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#ソースのフィルタ分け</span></span><br><span class="line"><span class="keyword">source_group</span>(<span class="string">&quot;include&quot;</span> FILES <span class="variable">$&#123;INC_SOURCES&#125;</span>)</span><br><span class="line"><span class="keyword">source_group</span>(<span class="string">&quot;src&quot;</span> FILES <span class="variable">$&#123;SRC_SOURCES&#125;</span>)</span><br></pre></td></tr></table></figure><p>cmakeコマンドは下記</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cmake -B_build -DCMAKE_CONFIGURATION_TYPES&#x3D;&quot;Debug;Develope;Release&quot;</span><br></pre></td></tr></table></figure><p>以上の操作で，下記のようにプリプロセッサマクロを変更できる</p><ul><li>Debug：DEBUG_MODE,ENABLE_TEST_CODE,ENABLE_PROFILE_CODE</li><li>Develop：DEVELOP_MODE,ENABLE_TEST_CODE,ENABLE_PROFILE_CODE</li><li>Release：RELEASE_MODE,</li></ul><h1 id="Step9-コンパイラの指定"><a href="#Step9-コンパイラの指定" class="headerlink" title="Step9 コンパイラの指定"></a>Step9 コンパイラの指定</h1><p>今まで，コンパイラにMSCV(cl.exe)を使用していた．C++のコンパイラは他にgcc,clangがあり，この二つでもコンパイルできるようにする．</p><h1 id="Step10-コンパイラオプションの設定"><a href="#Step10-コンパイラオプションの設定" class="headerlink" title="Step10 コンパイラオプションの設定"></a>Step10 コンパイラオプションの設定</h1><p>コンパイラに渡すオプションの設定も行える．<br>この章で使用行うのは下記とする</p><h2 id="MSVCのコンパイラ設定"><a href="#MSVCのコンパイラ設定" class="headerlink" title="MSVCのコンパイラ設定"></a>MSVCのコンパイラ設定</h2><ul><li>最適化<ul><li>Debug</li><li>Develope/Release</li></ul></li><li>デバッグ情報<ul><li>Debug</li><li>Develope/Release</li></ul></li><li>警告レベル<ul><li>Debug</li><li>Develope/Release</li></ul></li><li>指定した警告の無視<ul><li>Debug</li><li>Develope/Release</li></ul></li><li>警告をエラーにする<ul><li>Debug</li><li>Develope/Release</li></ul></li><li>浮動小数点モデル<ul><li>Debug</li><li>Develope/Release</li></ul></li><li>並列コード生成の有効<ul><li>Debug</li><li>Develope/Release化</li></ul></li></ul><h2 id="gccのコンパイラ設定"><a href="#gccのコンパイラ設定" class="headerlink" title="gccのコンパイラ設定"></a>gccのコンパイラ設定</h2><h2 id="clangのコンパイラ設定"><a href="#clangのコンパイラ設定" class="headerlink" title="clangのコンパイラ設定"></a>clangのコンパイラ設定</h2><h1 id="Step12-CMakeファイルの分割"><a href="#Step12-CMakeファイルの分割" class="headerlink" title="Step12 CMakeファイルの分割"></a>Step12 CMakeファイルの分割</h1><p>CMakeは*.cmakeファイルを作成することでモジュールとして使用することが可能となる．</p><p>これを使用して，ファイル分割する．</p><h2 id="Common-cmake"><a href="#Common-cmake" class="headerlink" title="Common.cmake"></a>Common.cmake</h2><h2 id="SettingConfigurations-cmake"><a href="#SettingConfigurations-cmake" class="headerlink" title="SettingConfigurations.cmake"></a>SettingConfigurations.cmake</h2><h2 id="SettingCompiler-cmake"><a href="#SettingCompiler-cmake" class="headerlink" title="SettingCompiler.cmake"></a>SettingCompiler.cmake</h2><h2 id="CMakeLists-txt-1"><a href="#CMakeLists-txt-1" class="headerlink" title="CMakeLists.txt"></a>CMakeLists.txt</h2><h1 id="Step13-サブプロジェクトの追加"><a href="#Step13-サブプロジェクトの追加" class="headerlink" title="Step13 サブプロジェクトの追加"></a>Step13 サブプロジェクトの追加</h1><h1 id="Step14-batファイルで自動化"><a href="#Step14-batファイルで自動化" class="headerlink" title="Step14 batファイルで自動化"></a>Step14 batファイルで自動化</h1><p>今まで，実行してきたcmakeコマンドをCMakeListsと連携したbat(または，ps1)ファイルに記述し，実行するだけで開発環境が構築できるようにする．</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Step1-HelloWorldプロジェクトの作成&quot;&gt;&lt;a href=&quot;#Step1-HelloWorldプロジェクトの作成&quot; class=&quot;headerlink&quot; title=&quot;Step1 HelloWorldプロジェクトの作成&quot;&gt;&lt;/a&gt;Step1 Hello</summary>
      
    
    
    
    
  </entry>
  
</feed>
