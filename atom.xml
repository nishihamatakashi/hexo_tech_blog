<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Nishihama&#39;s Tech Blog</title>
  
  
  <link href="https://nishihamatakashi.github.io/atom.xml" rel="self"/>
  
  <link href="https://nishihamatakashi.github.io/"/>
  <updated>2020-12-22T17:21:29.284Z</updated>
  <id>https://nishihamatakashi.github.io/</id>
  
  <author>
    <name>Nishihama Takashi</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>C++におけるtemplateについて</title>
    <link href="https://nishihamatakashi.github.io/2020/12/25/CppTemplate/"/>
    <id>https://nishihamatakashi.github.io/2020/12/25/CppTemplate/</id>
    <published>2020-12-24T17:18:13.316Z</published>
    <updated>2020-12-22T17:21:29.284Z</updated>
    
    <content type="html"><![CDATA[<h1 id="目次"><a href="#目次" class="headerlink" title="目次"></a>目次</h1><ul><li>templateについて</li><li>完全特殊化・部分特殊化</li><li>型制約によるコンパイルアサ―ト</li><li>SFINAE</li><li>テンプレートメタプログラミング</li></ul><h1 id="templateについて"><a href="#templateについて" class="headerlink" title="templateについて"></a>templateについて</h1><p>静的型付けのプログラミング言語でデータ型を抽象化してコードを書くことができるようにする機能で，C++ではジェネリックプログラミングに用いられる．<br>C++では下記のtemplateに対応している．</p><ul><li>関数</li><li>クラス</li><li>構造体</li><li>変数</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//template関数</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">testFunc</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//templateクラス</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">testClass</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//template構造体</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">testStruct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//template変数</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">constexpr</span> T pi = <span class="keyword">static_cast</span>&lt;T&gt;(<span class="number">3.14159265358979323846</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>また，記述としては<code>template&lt;typename T&gt;</code>と<code>template&lt;class T&gt;</code>がある．<br>どちらも，同じ意味になる．一般的にclassは自分で定義したクラス，typenameはリテラル型であることが一般的．</p><h1 id="完全特殊化・部分特殊化"><a href="#完全特殊化・部分特殊化" class="headerlink" title="完全特殊化・部分特殊化"></a>完全特殊化・部分特殊化</h1><p>仮に下記のような自作のprint_number関数を作ったとする．</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="comment">//ただのprintf</span></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">print_number</span><span class="params">(<span class="keyword">const</span> T&amp; value)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> p = <span class="number">0</span>;</span><br><span class="line">    print_number&lt;<span class="keyword">int</span>&gt;(p);</span><br><span class="line">    getchar();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>実行結果<code>0</code><br>上記の場合int型を指定すれば，動作する．しかし，型がfloatなど様々なリテラル型の場合に対応したリテラル指定子に変えたい場合は下記のような特殊化を行う．</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">print_number</span><span class="params">(<span class="keyword">const</span> T value)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;&gt; <span class="keyword">inline</span> <span class="keyword">void</span> print_number&lt;<span class="keyword">int</span>&gt;(<span class="keyword">const</span> <span class="keyword">int</span> value) </span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;&gt; <span class="keyword">inline</span> <span class="keyword">void</span> print_number&lt;<span class="keyword">float</span>&gt;(<span class="keyword">const</span> <span class="keyword">float</span> value) </span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%f&quot;</span>, value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> p_int = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">float</span> p_float = <span class="number">0.0f</span>;</span><br><span class="line">    print_number&lt;<span class="keyword">int</span>&gt;(p_int);</span><br><span class="line">    print_number&lt;<span class="keyword">float</span>&gt;(p_float);</span><br><span class="line">    getchar();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>実行結果<code>0 0.000000</code>と，型Tに設定した型によってinline展開する関数を変えることができる．</p><p>また，template引数が複数ある場合下記のように片方のみを特殊化することができる．<br>これは部分特殊化となる．</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;目次&quot;&gt;&lt;a href=&quot;#目次&quot; class=&quot;headerlink&quot; title=&quot;目次&quot;&gt;&lt;/a&gt;目次&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;templateについて&lt;/li&gt;
&lt;li&gt;完全特殊化・部分特殊化&lt;/li&gt;
&lt;li&gt;型制約によるコンパイルアサ―ト&lt;/li&gt;
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>CMakeチュートリアル</title>
    <link href="https://nishihamatakashi.github.io/2020/12/25/CMakeTutorial/"/>
    <id>https://nishihamatakashi.github.io/2020/12/25/CMakeTutorial/</id>
    <published>2020-12-24T17:17:30.170Z</published>
    <updated>2020-12-24T15:04:02.744Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Step1-HelloWorldプロジェクトの作成"><a href="#Step1-HelloWorldプロジェクトの作成" class="headerlink" title="Step1 HelloWorldプロジェクトの作成"></a>Step1 HelloWorldプロジェクトの作成</h1><p>CMakeを利用して，cppのvsプロジェクトの作成，ビルドを行う．</p><h2 id="フォルダ構成"><a href="#フォルダ構成" class="headerlink" title="フォルダ構成"></a>フォルダ構成</h2><pre><code>-code    |-_build    |-main.cpp    |-CMakeLists.txt</code></pre><h2 id="main-cpp"><a href="#main-cpp" class="headerlink" title="main.cpp"></a>main.cpp</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Hello World&quot;</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="CMakeLists-txt"><a href="#CMakeLists-txt" class="headerlink" title="CMakeLists.txt"></a>CMakeLists.txt</h2><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># バージョン保証</span></span><br><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.15</span>.<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#project作成</span></span><br><span class="line"><span class="keyword">project</span>(MyProject VERSION <span class="number">1.0</span>.<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#exeプロジェクト作成</span></span><br><span class="line"><span class="keyword">add_executable</span>(cmake-good main.cpp)</span><br></pre></td></tr></table></figure><h2 id="コマンド"><a href="#コマンド" class="headerlink" title="コマンド"></a>コマンド</h2><pre><code>- cd/_build- cmake ../- cmake --build ../_build- /Debug/cmake-good- 実行結果：HelloWorld</code></pre><h1 id="Step2-Out-Source-Build"><a href="#Step2-Out-Source-Build" class="headerlink" title="Step2 Out Source Build"></a>Step2 Out Source Build</h1><p>Step1では，プロジェクトファイルやビルド成果物を<code>_build</code>ディレクトリにまとめるため下記のような操作をした．</p><ul><li>_buildディレクトリ作成</li><li>_buildディレクトリに移動</li><li>CMakeLists.txtのディレクトリを指定してcmake</li></ul><p>これをCmakeコマンドのみで実行することで，ビルドツリーとソースツリーを分けることができ，gitへのコミットや成果物の削除が容易になる．</p><h2 id="コマンド-1"><a href="#コマンド-1" class="headerlink" title="コマンド"></a>コマンド</h2><pre><code>- cmake -B _build- cmake --build _build</code></pre><h1 id="Step3-複数ファイルのコンパイル"><a href="#Step3-複数ファイルのコンパイル" class="headerlink" title="Step3 複数ファイルのコンパイル"></a>Step3 複数ファイルのコンパイル</h1><p>ヘッダーファイル(.h)やソースファイル(.cpp)をまとめて，プロジェクトに登録しビルドする．</p><h2 id="フォルダ構成-1"><a href="#フォルダ構成-1" class="headerlink" title="フォルダ構成"></a>フォルダ構成</h2><pre><code>- code    |- include    |   |- MyMath.h    |   |- Vector.h    |-src        |-Main.cpp        |-MyMath.cpp        |-Vector.cpp</code></pre><h2 id="ソースファイル"><a href="#ソースファイル" class="headerlink" title="ソースファイル"></a>ソースファイル</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*--------------------------------------------------------</span></span><br><span class="line"><span class="comment">*@file MyMath.h</span></span><br><span class="line"><span class="comment">*/</span> <span class="comment">//-----------------------------------------------------</span></span><br><span class="line"><span class="keyword">namespace</span> app</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">test_print</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*--------------------------------------------------------</span></span><br><span class="line"><span class="comment">*@file MyMath.cpp</span></span><br><span class="line"><span class="comment">*/</span> <span class="comment">//-----------------------------------------------------</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;MyMath.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> app</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">test_print</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;test&quot;</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*--------------------------------------------------------</span></span><br><span class="line"><span class="comment">*@file Vector.h</span></span><br><span class="line"><span class="comment">*/</span> <span class="comment">//-----------------------------------------------------</span></span><br><span class="line"><span class="keyword">namespace</span> app</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">test_vector</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*--------------------------------------------------------</span></span><br><span class="line"><span class="comment">*@file Vector.cpp</span></span><br><span class="line"><span class="comment">*/</span> <span class="comment">//-----------------------------------------------------</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;Vector.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> app</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">test_vector</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;vector&quot;</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*--------------------------------------------------------</span></span><br><span class="line"><span class="comment">*@file Main.cpp</span></span><br><span class="line"><span class="comment">*/</span> <span class="comment">//-----------------------------------------------------</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;MyMath.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;Vector.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    app::test_print();</span><br><span class="line">    app::test_vector();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="CMakeファイル"><a href="#CMakeファイル" class="headerlink" title="CMakeファイル"></a>CMakeファイル</h2><p>操作の手順としては下記</p><ul><li>各種変数を設定</li><li>ソースディレクトリからファイルを収集</li><li>まとめてadd_executableに登録</li><li>includeディレクトリを設定</li><li>vsのプロジェクト内でフィルター毎にファイルが分類されるように設定</li></ul><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># バージョン保証</span></span><br><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.15</span>.<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#CMakeListsのカレントディレクトリ</span></span><br><span class="line"><span class="keyword">set</span>(CURRENT_DIR <span class="variable">$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#ソースディレクトリ</span></span><br><span class="line"><span class="keyword">set</span>(SOURCE_DIR <span class="variable">$&#123;CURRENT_DIR&#125;</span>/src)</span><br><span class="line"></span><br><span class="line"><span class="comment">#includeディレクトリ</span></span><br><span class="line"><span class="keyword">set</span>(INCLUDE_DIR <span class="variable">$&#123;CURRENT_DIR&#125;</span>/<span class="keyword">include</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span>(SOURCES <span class="string">&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#inludeディレクトリから.hファイルを収集し,SOURCESに追加</span></span><br><span class="line"><span class="keyword">file</span>(GLOB_RECURSE INC_SOURCES <span class="variable">$&#123;INCLUDE_DIR&#125;</span>/*.h)</span><br><span class="line"><span class="keyword">LIST</span>(APPEND SOURCES <span class="variable">$&#123;INC_SOURCES&#125;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#srcディレクトリから.cppファイルを収集し,SOURCESに追加</span></span><br><span class="line"><span class="keyword">file</span>(GLOB_RECURSE SRC_SOURCES <span class="variable">$&#123;SOURCE_DIR&#125;</span>/*.cpp)</span><br><span class="line"><span class="keyword">LIST</span>(APPEND SOURCES <span class="variable">$&#123;SRC_SOURCES&#125;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#project名</span></span><br><span class="line"><span class="keyword">set</span>(PROJECT_NAME <span class="string">&quot;MyProject&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#project作成</span></span><br><span class="line"><span class="keyword">project</span>(<span class="variable">$&#123;PROJECT_NAME&#125;</span> VERSION <span class="number">1.0</span>.<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#インクルードディレクトリの設定</span></span><br><span class="line"><span class="keyword">include_directories</span>(<span class="string">&quot;$&#123;INCLUDE_DIR&#125;&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#ソースをすべてプロジェクトに登録</span></span><br><span class="line"><span class="keyword">add_executable</span>(<span class="variable">$&#123;PROJECT_NAME&#125;</span> <span class="variable">$&#123;SOURCES&#125;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#ソースのフィルタ分け</span></span><br><span class="line"><span class="keyword">source_group</span>(<span class="string">&quot;include&quot;</span> FILES <span class="variable">$&#123;INC_SOURCES&#125;</span>)</span><br><span class="line"><span class="keyword">source_group</span>(<span class="string">&quot;src&quot;</span> FILES <span class="variable">$&#123;SRC_SOURCES&#125;</span>)</span><br></pre></td></tr></table></figure><h1 id="Step5-プロジェクト別の設定"><a href="#Step5-プロジェクト別の設定" class="headerlink" title="Step5 プロジェクト別の設定"></a>Step5 プロジェクト別の設定</h1><h1 id="Step6-外部ライブラリのリンク"><a href="#Step6-外部ライブラリのリンク" class="headerlink" title="Step6 外部ライブラリのリンク"></a>Step6 外部ライブラリのリンク</h1><h1 id="Step7-構成の設定"><a href="#Step7-構成の設定" class="headerlink" title="Step7 構成の設定"></a>Step7 構成の設定</h1><h1 id="Step8-プリプロセッサマクロの定義"><a href="#Step8-プリプロセッサマクロの定義" class="headerlink" title="Step8 プリプロセッサマクロの定義"></a>Step8 プリプロセッサマクロの定義</h1><h1 id="Step9-コンパイラオプションの設定"><a href="#Step9-コンパイラオプションの設定" class="headerlink" title="Step9 コンパイラオプションの設定"></a>Step9 コンパイラオプションの設定</h1><h1 id="Step10-CMakeファイルの分割"><a href="#Step10-CMakeファイルの分割" class="headerlink" title="Step10 CMakeファイルの分割"></a>Step10 CMakeファイルの分割</h1><h1 id="Step11-サブプロジェクトの追加"><a href="#Step11-サブプロジェクトの追加" class="headerlink" title="Step11 サブプロジェクトの追加"></a>Step11 サブプロジェクトの追加</h1><h1 id="Step12-batファイルで自動化"><a href="#Step12-batファイルで自動化" class="headerlink" title="Step12 batファイルで自動化"></a>Step12 batファイルで自動化</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Step1-HelloWorldプロジェクトの作成&quot;&gt;&lt;a href=&quot;#Step1-HelloWorldプロジェクトの作成&quot; class=&quot;headerlink&quot; title=&quot;Step1 HelloWorldプロジェクトの作成&quot;&gt;&lt;/a&gt;Step1 Hello</summary>
      
    
    
    
    
  </entry>
  
</feed>
